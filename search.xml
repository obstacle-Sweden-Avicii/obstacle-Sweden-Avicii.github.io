<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>图片无法加载解决方法</title>
    <url>/2024/11/30/1.%E5%9B%BE%E7%89%87.html</url>
    <content><![CDATA[<hr>
<h2 id="1-图片"><a href="#1-图片" class="headerlink" title="1.图片"></a>1.图片</h2><p>往typora插入图片，图片文件夹一定要和创建的.md文件夹放在同一个文件夹下。不然文件移动位置后图片会因找不到地址而消失</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">格式！[提示文字](图片地址)      即先！然后快捷键ctrl+k</span><br><span class="line">例如：![伊蕾娜](D:\blog\source\images\Elaina.jpg)</span><br></pre></td></tr></table></figure>

<img src="/2024/11/30/1.%E5%9B%BE%E7%89%87/20240913_122405110_iOS.png" class="" title="20240913_122405110_iOS">
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>相信很多人尝试上面图片的插入方法会遇到在typora能正常显示图片，但在网页上图片却无法加载。这是因为上述地址如D:\blog\source\images\Elaina.jpg为本地地址，而hexo+github搭建的博客并不能访问本地地址所以自然无法成功。</p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>最简单粗暴的方法就是直接将图片拖到typora中，typora会直接创建博客文章同名的文件夹存放图片。但是就是感觉文章写多了有点乱乱的。</p>
]]></content>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>my first blog</title>
    <url>/2024/11/03/blog.html</url>
    <content><![CDATA[<p>这是我的第一个博客</p>
]]></content>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>kmp算法学习</title>
    <url>/2025/01/18/kmp%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0.html</url>
    <content><![CDATA[<p>前言：前段时间在写pta上面的代码题时遇到一个查找字符串字串的问题，一开始采取i，j循环遍历的方法暴力寻找，但是很可惜时间复杂度上出现问题，于是经过学习，初步尝试运用kmp算法来解决查找字符串字串中时间复杂度的问题。</p>
<p>对kmp的名称由来等就不展开描述了直接进入代码部分。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">computeLPSArray</span><span class="params">(<span class="type">char</span>* pat, <span class="type">int</span> M, <span class="type">int</span>* lps)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> len = <span class="number">0</span>,i=<span class="number">1</span>;  <span class="comment">// 当前最长前缀后缀长度</span></span><br><span class="line">    lps[<span class="number">0</span>] = <span class="number">0</span>;   <span class="comment">// lps[0] 总是为 0</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt; M)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (pat[i] == pat[len]) </span><br><span class="line">        &#123;</span><br><span class="line">            len++;</span><br><span class="line">            lps[i] = len;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (len != <span class="number">0</span>)   <span class="comment">// 不匹配时，根据 lps 数组更新 len</span></span><br><span class="line">            &#123;</span><br><span class="line">                len = lps[len - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">            &#123;</span><br><span class="line">                lps[i] = <span class="number">0</span>;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">KMPSearch</span><span class="params">(<span class="type">char</span>* pat, <span class="type">char</span>* txt)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> M = <span class="built_in">strlen</span>(pat);</span><br><span class="line">    <span class="type">int</span> N = <span class="built_in">strlen</span>(txt);</span><br><span class="line">    <span class="type">int</span>* lps = (<span class="type">int</span>*)<span class="built_in">malloc</span>(M * <span class="built_in">sizeof</span>(<span class="type">int</span>));  <span class="comment">// 创建 lps 数组</span></span><br><span class="line">    <span class="built_in">computeLPSArray</span>(pat, M, lps);</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>; <span class="comment">// txt 的索引</span></span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>; <span class="comment">// pat 的索引</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt; N)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (pat[j] == txt[i])</span><br><span class="line">        &#123;</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (j == M)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;找到模式字符串 &#x27;%s&#x27; 的起始位置: %d\n&quot;</span>, pat, i - j);</span><br><span class="line">            j = lps[j - <span class="number">1</span>];</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(i &lt; N &amp;&amp; pat[j] != txt[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (j != <span class="number">0</span>)   <span class="comment">// 字符不匹配</span></span><br><span class="line">            &#123;</span><br><span class="line">                j = lps[j - <span class="number">1</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">char</span> txt[] = <span class="string">&quot;ABABDABACDABABCABAB&quot;</span>;</span><br><span class="line">    <span class="type">char</span> pat[] = <span class="string">&quot;ABABCABAB&quot;</span>;</span><br><span class="line">    <span class="built_in">KMPSearch</span>(pat, txt);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>个人理解，掌握kmp算法的关键就是掌握lps数组的构造（网上大部分也称next数组，就把lps换成next），lps数组也就是找字串中的最大公共前后缀，它可以帮助我们查找子串时优化“回溯”过程，因为用i，j单纯暴力循环每次都要回到最初会有很多浪费，利用lps数组的构造就可以优化这个过程。具体概念理解，以及构造思路还需要在网络上自己找视频理解。</p>
<p>接下来是pta里面的一道题，运用kmp算法解决。</p>
<p><strong>7-11 删除字符串中的子串</strong></p>
<p>分数 10</p>
<p>作者 白洪欢</p>
<p>单位 浙江大学</p>
<p>输入2个字符串S1和S2，要求删除字符串S1中出现的所有子串S2，即结果字符串中不能包含S2。</p>
<h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在2行中分别给出不超过80个字符长度的、以回车结束的2个非空字符串，对应S1和S2。</p>
<h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中输出删除字符串S1中出现的所有子串S2后的结果字符串。</p>
<h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Tomcat is a male ccatat</span><br><span class="line">cat</span><br></pre></td></tr></table></figure>

<h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Tom is a male </span><br></pre></td></tr></table></figure>

<p>下面是通过代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="comment">// 计算LPS（最长前缀后缀）数组</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">computeLPSArray</span><span class="params">(<span class="type">char</span>* pat, <span class="type">int</span> M, <span class="type">int</span>* lps)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> len = <span class="number">0</span>; <span class="comment">// 当前最长前缀长度</span></span><br><span class="line">    lps[<span class="number">0</span>] = <span class="number">0</span>; <span class="comment">// lps[0] 总是为 0</span></span><br><span class="line">    <span class="type">int</span> i = <span class="number">1</span>; <span class="comment">// 从 lps[1] 开始计算</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt; M) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pat[i] == pat[len]) &#123;</span><br><span class="line">            len++;</span><br><span class="line">            lps[i] = len;</span><br><span class="line">            i++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (len != <span class="number">0</span>) &#123;</span><br><span class="line">                len = lps[len - <span class="number">1</span>]; <span class="comment">// 根据 lps 更新 len</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                lps[i] = <span class="number">0</span>;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// KMP搜索算法 - 查找并删除所有出现的子串</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">KMPSearchAndDelete</span><span class="params">(<span class="type">char</span>* txt, <span class="type">char</span>* pat)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> M = <span class="built_in">strlen</span>(pat);</span><br><span class="line">    <span class="type">int</span> N = <span class="built_in">strlen</span>(txt);</span><br><span class="line">    <span class="type">int</span>* lps = (<span class="type">int</span>*)<span class="built_in">malloc</span>(M * <span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="built_in">computeLPSArray</span>(pat, M, lps);</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>; <span class="comment">// 主串的索引</span></span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>; <span class="comment">// 模式串的索引</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt; N) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pat[j] == txt[i]) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (j == M) &#123;</span><br><span class="line">            <span class="comment">// 找到一个匹配，删除子串</span></span><br><span class="line">            <span class="built_in">memmove</span>(&amp;txt[i - j], &amp;txt[i], N - i + <span class="number">1</span>); <span class="comment">// 移动后面的字符</span></span><br><span class="line">            N -= j; <span class="comment">// 更新主串长度</span></span><br><span class="line">            txt[N] = <span class="string">&#x27;\0&#x27;</span>; <span class="comment">// 确保以&#x27;\0&#x27;结束</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 重置j为0，继续寻找进一步的匹配</span></span><br><span class="line">            j = <span class="number">0</span>;</span><br><span class="line">            i = <span class="number">0</span>; <span class="comment">// 从头再继续检查</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i &lt; N &amp;&amp; pat[j] != txt[i]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j != <span class="number">0</span>) &#123;</span><br><span class="line">                j = lps[j - <span class="number">1</span>]; <span class="comment">// 根据lps调整j</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(lps); <span class="comment">// 释放内存</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> s1[<span class="number">256</span>]; <span class="comment">// 增大数组大小以容纳更长的字符串</span></span><br><span class="line">    <span class="type">char</span> s2[<span class="number">81</span>];</span><br><span class="line">    <span class="built_in">fgets</span>(s1, <span class="built_in">sizeof</span>(s1), stdin);</span><br><span class="line">    s1[<span class="built_in">strcspn</span>(s1, <span class="string">&quot;\n&quot;</span>)] = <span class="number">0</span>; <span class="comment">// 去掉换行符</span></span><br><span class="line">    <span class="built_in">fgets</span>(s2, <span class="built_in">sizeof</span>(s2), stdin);</span><br><span class="line">    s2[<span class="built_in">strcspn</span>(s2, <span class="string">&quot;\n&quot;</span>)] = <span class="number">0</span>; <span class="comment">// 去掉换行符</span></span><br><span class="line">    <span class="comment">// 持续删除子串直到找不到为止</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">strstr</span>(s1, s2) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">KMPSearchAndDelete</span>(s1, s2); <span class="comment">// 查找并删除子串</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, s1); <span class="comment">// 输出结果</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>typora测试尝试</title>
    <url>/2024/11/21/typora%E5%8A%9F%E8%83%BD%E5%88%9D%E6%AD%A5%E5%B0%9D%E8%AF%95.html</url>
    <content><![CDATA[<h1 id="typora功能初步尝试"><a href="#typora功能初步尝试" class="headerlink" title="typora功能初步尝试"></a>typora功能初步尝试</h1><h2 id="1-标题"><a href="#1-标题" class="headerlink" title="1.标题"></a>1.标题</h2><p>一级标题：ctrl+1或#<br>二级标题：ctrl+2或##<br>剩下的三级四级等就可以以此类推了</p>
<h2 id="2-文字"><a href="#2-文字" class="headerlink" title="2.文字"></a>2.文字</h2><p>删除线：alt+shift+5    示例   ~~~~<br>加粗：ctrl+B 示例  <strong>加粗</strong><br>斜体：ctrl+I 示例  <em>斜体</em><br>下划线：ctrl+U 示例 <u>下划线</u><br>高亮：&#x3D;&#x3D;中间内容&#x3D;&#x3D;</p>
<h2 id="3-表情包"><a href="#3-表情包" class="headerlink" title="3.表情包"></a>3.表情包</h2><p>:smile: :100: :heart:  快捷键:windows+；    </p>
<h2 id="4-表格"><a href="#4-表格" class="headerlink" title="4.表格"></a>4.表格</h2><table>
<thead>
<tr>
<th>week2</th>
<th>week3</th>
<th>week4</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>快捷键:ctrl+t</p>
<h2 id="5-引用"><a href="#5-引用" class="headerlink" title="5.引用"></a>5.引用</h2><blockquote>
<p>一级应用</p>
<blockquote>
<p>二级引用</p>
<blockquote>
<p>瑞典厨师长</p>
</blockquote>
</blockquote>
</blockquote>
<h2 id="6-代码"><a href="#6-代码" class="headerlink" title="6.代码"></a>6.代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">插入不确定代码，快捷键：ctrl+shift+k</span><br></pre></td></tr></table></figure>

<h2 id="7-分隔线"><a href="#7-分隔线" class="headerlink" title="7.分隔线"></a>7.分隔线</h2><hr>
<p>***  然后回车</p>
<h2 id="8-源代码模式"><a href="#8-源代码模式" class="headerlink" title="8.源代码模式"></a>8.源代码模式</h2><p>ctrl+&#x2F;,退出一样</p>
<h2 id="9-跳转"><a href="#9-跳转" class="headerlink" title="9.跳转"></a>9.跳转</h2><h4 id="1-跳转到外部"><a href="#1-跳转到外部" class="headerlink" title="1.跳转到外部"></a>1.跳转到外部</h4><p><a href="https://www.bilibili.com/">bilibili</a><br><a href="obstacle.top">屑魔女的个人博客</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">快捷键：ctrl+k      格式[提示文字](网址)</span><br></pre></td></tr></table></figure>

<h4 id="2-跳转到内部"><a href="#2-跳转到内部" class="headerlink" title="2.跳转到内部"></a>2.跳转到内部</h4><p>[博客](#<a href="http://localhost:4000/2024/11/03/blog/">my first blog</a>)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">快捷键：CTRL+k     [提示文字](#标题)</span><br></pre></td></tr></table></figure>

<h2 id="10-自动链接"><a href="#10-自动链接" class="headerlink" title="10.自动链接"></a>10.自动链接</h2><p>使用&lt;&gt;然后括号里链接会自动转化为超链接</p>
<h2 id="11-图片"><a href="#11-图片" class="headerlink" title="11.图片"></a>11.图片</h2><p>往typora插入图片，图片文件夹一定要和创建的.md文件夹放在同一个文件夹下。不然文件移动位置后图片会因找不到地址而消失</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">格式！[提示文字](图片地址)      即先！然后快捷键ctrl+k</span><br><span class="line">例如：![伊蕾娜](D:\blog\source\images\Elaina.jpg)</span><br></pre></td></tr></table></figure>

<p><img src="/%5Cimages%5CElaina.jpg" alt="伊蕾娜"></p>
]]></content>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>hgame 2025 week2 crypto</title>
    <url>/2025/02/18/hgame2025week2%20crypto.html</url>
    <content><![CDATA[<p>总结一下hgame week2crypto部分。自己虽然学了一段时间，结果week1密码一道没做出来，还是非常遗憾的，所幸week2密码是ak了的</p>
<h1 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h1><h2 id="1-ancient-recall"><a href="#1-ancient-recall" class="headerlink" title="1.ancient recall"></a>1.ancient recall</h2><p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">Major_Arcana = [<span class="string">&quot;The Fool&quot;</span>, <span class="string">&quot;The Magician&quot;</span>, <span class="string">&quot;The High Priestess&quot;</span>,<span class="string">&quot;The Empress&quot;</span>, <span class="string">&quot;The Emperor&quot;</span>, <span class="string">&quot;The Hierophant&quot;</span>,<span class="string">&quot;The Lovers&quot;</span>, <span class="string">&quot;The Chariot&quot;</span>, <span class="string">&quot;Strength&quot;</span>,<span class="string">&quot;The Hermit&quot;</span>, <span class="string">&quot;Wheel of Fortune&quot;</span>, <span class="string">&quot;Justice&quot;</span>,<span class="string">&quot;The Hanged Man&quot;</span>, <span class="string">&quot;Death&quot;</span>, <span class="string">&quot;Temperance&quot;</span>,<span class="string">&quot;The Devil&quot;</span>, <span class="string">&quot;The Tower&quot;</span>, <span class="string">&quot;The Star&quot;</span>,<span class="string">&quot;The Moon&quot;</span>, <span class="string">&quot;The Sun&quot;</span>, <span class="string">&quot;Judgement&quot;</span>,<span class="string">&quot;The World&quot;</span>]</span><br><span class="line">wands = [<span class="string">&quot;Ace of Wands&quot;</span>, <span class="string">&quot;Two of Wands&quot;</span>, <span class="string">&quot;Three of Wands&quot;</span>, <span class="string">&quot;Four of Wands&quot;</span>, <span class="string">&quot;Five of Wands&quot;</span>, <span class="string">&quot;Six of Wands&quot;</span>, <span class="string">&quot;Seven of Wands&quot;</span>, <span class="string">&quot;Eight of Wands&quot;</span>, <span class="string">&quot;Nine of Wands&quot;</span>, <span class="string">&quot;Ten of Wands&quot;</span>, <span class="string">&quot;Page of Wands&quot;</span>, <span class="string">&quot;Knight of Wands&quot;</span>, <span class="string">&quot;Queen of Wands&quot;</span>, <span class="string">&quot;King of Wands&quot;</span>]</span><br><span class="line">cups = [<span class="string">&quot;Ace of Cups&quot;</span>, <span class="string">&quot;Two of Cups&quot;</span>, <span class="string">&quot;Three of Cups&quot;</span>, <span class="string">&quot;Four of Cups&quot;</span>, <span class="string">&quot;Five of Cups&quot;</span>, <span class="string">&quot;Six of Cups&quot;</span>, <span class="string">&quot;Seven of Cups&quot;</span>, <span class="string">&quot;Eight of Cups&quot;</span>, <span class="string">&quot;Nine of Cups&quot;</span>, <span class="string">&quot;Ten of Cups&quot;</span>, <span class="string">&quot;Page of Cups&quot;</span>, <span class="string">&quot;Knight of Cups&quot;</span>, <span class="string">&quot;Queen of Cups&quot;</span>, <span class="string">&quot;King of Cups&quot;</span>]</span><br><span class="line">swords = [<span class="string">&quot;Ace of Swords&quot;</span>, <span class="string">&quot;Two of Swords&quot;</span>, <span class="string">&quot;Three of Swords&quot;</span>, <span class="string">&quot;Four of Swords&quot;</span>, <span class="string">&quot;Five of Swords&quot;</span>, <span class="string">&quot;Six of Swords&quot;</span>, <span class="string">&quot;Seven of Swords&quot;</span>, <span class="string">&quot;Eight of Swords&quot;</span>, <span class="string">&quot;Nine of Swords&quot;</span>, <span class="string">&quot;Ten of Swords&quot;</span>, <span class="string">&quot;Page of Swords&quot;</span>, <span class="string">&quot;Knight of Swords&quot;</span>, <span class="string">&quot;Queen of Swords&quot;</span>, <span class="string">&quot;King of Swords&quot;</span>]</span><br><span class="line">pentacles = [<span class="string">&quot;Ace of Pentacles&quot;</span>, <span class="string">&quot;Two of Pentacles&quot;</span>, <span class="string">&quot;Three of Pentacles&quot;</span>, <span class="string">&quot;Four of Pentacles&quot;</span>, <span class="string">&quot;Five of Pentacles&quot;</span>, <span class="string">&quot;Six of Pentacles&quot;</span>, <span class="string">&quot;Seven of Pentacles&quot;</span>, <span class="string">&quot;Eight of Pentacles&quot;</span>, <span class="string">&quot;Nine of Pentacles&quot;</span>, <span class="string">&quot;Ten of Pentacles&quot;</span>, <span class="string">&quot;Page of Pentacles&quot;</span>, <span class="string">&quot;Knight of Pentacles&quot;</span>, <span class="string">&quot;Queen of Pentacles&quot;</span>, <span class="string">&quot;King of Pentacles&quot;</span>]</span><br><span class="line">Minor_Arcana = wands + cups + swords + pentacles</span><br><span class="line">tarot = Major_Arcana + Minor_Arcana</span><br><span class="line">reversals = [<span class="number">0</span>,-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">Value = []</span><br><span class="line">cards = []</span><br><span class="line">YOUR_initial_FATE = []</span><br><span class="line"><span class="keyword">while</span> <span class="built_in">len</span>(YOUR_initial_FATE)&lt;<span class="number">5</span>:</span><br><span class="line">    card = random.choice(tarot)</span><br><span class="line">    <span class="keyword">if</span> card <span class="keyword">not</span> <span class="keyword">in</span> cards:</span><br><span class="line">        cards.append(card)</span><br><span class="line">        <span class="keyword">if</span> card <span class="keyword">in</span> Major_Arcana:</span><br><span class="line">            k = random.choice(reversals)</span><br><span class="line">            Value.append(tarot.index(card)^k)</span><br><span class="line">            <span class="keyword">if</span> k == -<span class="number">1</span>:</span><br><span class="line">                YOUR_initial_FATE.append(<span class="string">&quot;re-&quot;</span>+card)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                YOUR_initial_FATE.append(card)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            Value.append(tarot.index(card))</span><br><span class="line">            YOUR_initial_FATE.append(card)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Oops!lets reverse 1T!&quot;</span>)</span><br><span class="line"></span><br><span class="line">FLAG=(<span class="string">&quot;hgame&#123;&quot;</span>+<span class="string">&quot;&amp;&quot;</span>.join(YOUR_initial_FATE)+<span class="string">&quot;&#125;&quot;</span>).replace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;_&quot;</span>)</span><br><span class="line"></span><br><span class="line">YOUR_final_Value = Value</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Fortune_wheel</span>(<span class="params">FATE</span>):</span><br><span class="line">    FATEd = [FATE[i]+FATE[(i+<span class="number">1</span>)%<span class="number">5</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(FATE))]</span><br><span class="line">    <span class="keyword">return</span> FATEd</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">250</span>):</span><br><span class="line">    YOUR_final_Value = Fortune_wheel(YOUR_final_Value)</span><br><span class="line"><span class="built_in">print</span>(YOUR_final_Value)</span><br><span class="line">YOUR_final_FATE = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> YOUR_final_Value:</span><br><span class="line">    YOUR_final_FATE.append(tarot[i%<span class="number">78</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Your destiny changed!\n&quot;</span>,<span class="string">&quot;,&quot;</span>.join(YOUR_final_FATE))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;oh,now you GET th3 GOOd lU&gt;k,^^&quot;</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Oops!lets reverse 1T!</span></span><br><span class="line"><span class="string">[2532951952066291774890498369114195917240794704918210520571067085311474675019, 2532951952066291774890327666074100357898023013105443178881294700381509795270, 2532951952066291774890554459287276604903130315859258544173068376967072335730, 2532951952066291774890865328241532885391510162611534514014409174284299139015, 2532951952066291774890830662608134156017946376309989934175833913921142609334]</span></span><br><span class="line"><span class="string">Your destiny changed!</span></span><br><span class="line"><span class="string"> Eight of Cups,Ace of Cups,Strength,The Chariot,Five of Swords</span></span><br><span class="line"><span class="string">oh,now you GET th3 GOOd lU&gt;k,^^</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>emmmm,自己看不太懂，但题目应该比较简单，丢给ai直接解出来（</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Major_Arcana = [<span class="string">&quot;The Fool&quot;</span>, <span class="string">&quot;The Magician&quot;</span>, <span class="string">&quot;The High Priestess&quot;</span>,<span class="string">&quot;The Empress&quot;</span>, <span class="string">&quot;The Emperor&quot;</span>, <span class="string">&quot;The Hierophant&quot;</span>,<span class="string">&quot;The Lovers&quot;</span>, <span class="string">&quot;The Chariot&quot;</span>, <span class="string">&quot;Strength&quot;</span>,<span class="string">&quot;The Hermit&quot;</span>, <span class="string">&quot;Wheel of Fortune&quot;</span>, <span class="string">&quot;Justice&quot;</span>,<span class="string">&quot;The Hanged Man&quot;</span>, <span class="string">&quot;Death&quot;</span>, <span class="string">&quot;Temperance&quot;</span>,<span class="string">&quot;The Devil&quot;</span>, <span class="string">&quot;The Tower&quot;</span>, <span class="string">&quot;The Star&quot;</span>,<span class="string">&quot;The Moon&quot;</span>, <span class="string">&quot;The Sun&quot;</span>, <span class="string">&quot;Judgement&quot;</span>,<span class="string">&quot;The World&quot;</span>]</span><br><span class="line">wands = [<span class="string">&quot;Ace of Wands&quot;</span>, <span class="string">&quot;Two of Wands&quot;</span>, <span class="string">&quot;Three of Wands&quot;</span>, <span class="string">&quot;Four of Wands&quot;</span>, <span class="string">&quot;Five of Wands&quot;</span>, <span class="string">&quot;Six of Wands&quot;</span>, <span class="string">&quot;Seven of Wands&quot;</span>, <span class="string">&quot;Eight of Wands&quot;</span>, <span class="string">&quot;Nine of Wands&quot;</span>, <span class="string">&quot;Ten of Wands&quot;</span>, <span class="string">&quot;Page of Wands&quot;</span>, <span class="string">&quot;Knight of Wands&quot;</span>, <span class="string">&quot;Queen of Wands&quot;</span>, <span class="string">&quot;King of Wands&quot;</span>]</span><br><span class="line">cups = [<span class="string">&quot;Ace of Cups&quot;</span>, <span class="string">&quot;Two of Cups&quot;</span>, <span class="string">&quot;Three of Cups&quot;</span>, <span class="string">&quot;Four of Cups&quot;</span>, <span class="string">&quot;Five of Cups&quot;</span>, <span class="string">&quot;Six of Cups&quot;</span>, <span class="string">&quot;Seven of Cups&quot;</span>, <span class="string">&quot;Eight of Cups&quot;</span>, <span class="string">&quot;Nine of Cups&quot;</span>, <span class="string">&quot;Ten of Cups&quot;</span>, <span class="string">&quot;Page of Cups&quot;</span>, <span class="string">&quot;Knight of Cups&quot;</span>, <span class="string">&quot;Queen of Cups&quot;</span>, <span class="string">&quot;King of Cups&quot;</span>]</span><br><span class="line">swords = [<span class="string">&quot;Ace of Swords&quot;</span>, <span class="string">&quot;Two of Swords&quot;</span>, <span class="string">&quot;Three of Swords&quot;</span>, <span class="string">&quot;Four of Swords&quot;</span>, <span class="string">&quot;Five of Swords&quot;</span>, <span class="string">&quot;Six of Swords&quot;</span>, <span class="string">&quot;Seven of Swords&quot;</span>, <span class="string">&quot;Eight of Swords&quot;</span>, <span class="string">&quot;Nine of Swords&quot;</span>, <span class="string">&quot;Ten of Swords&quot;</span>, <span class="string">&quot;Page of Swords&quot;</span>, <span class="string">&quot;Knight of Swords&quot;</span>, <span class="string">&quot;Queen of Swords&quot;</span>, <span class="string">&quot;King of Swords&quot;</span>]</span><br><span class="line">pentacles = [<span class="string">&quot;Ace of Pentacles&quot;</span>, <span class="string">&quot;Two of Pentacles&quot;</span>, <span class="string">&quot;Three of Pentacles&quot;</span>, <span class="string">&quot;Four of Pentacles&quot;</span>, <span class="string">&quot;Five of Pentacles&quot;</span>, <span class="string">&quot;Six of Pentacles&quot;</span>, <span class="string">&quot;Seven of Pentacles&quot;</span>, <span class="string">&quot;Eight of Pentacles&quot;</span>, <span class="string">&quot;Nine of Pentacles&quot;</span>, <span class="string">&quot;Ten of Pentacles&quot;</span>, <span class="string">&quot;Page of Pentacles&quot;</span>, <span class="string">&quot;Knight of Pentacles&quot;</span>, <span class="string">&quot;Queen of Pentacles&quot;</span>, <span class="string">&quot;King of Pentacles&quot;</span>]</span><br><span class="line">Minor_Arcana = wands + cups + swords + pentacles</span><br><span class="line">tarot = Major_Arcana + Minor_Arcana</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reverse_step</span>(<span class="params">B</span>):</span><br><span class="line">    B0, B1, B2, B3, B4 = B</span><br><span class="line">    numerator = B0 + B1 + B3 - B2 - B4</span><br><span class="line">    <span class="keyword">if</span> numerator % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;奇数无法整除&quot;</span>)</span><br><span class="line">    A1 = numerator // <span class="number">2</span></span><br><span class="line">    A0 = B0 - A1</span><br><span class="line">    A2 = B1 - A1</span><br><span class="line">    A3 = B2 - A2</span><br><span class="line">    A4 = B3 - A3</span><br><span class="line">    <span class="keyword">if</span> A4 + A0 != B4:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;验证失败&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> [A0, A1, A2, A3, A4]</span><br><span class="line">final_values = [</span><br><span class="line">    <span class="number">2532951952066291774890498369114195917240794704918210520571067085311474675019</span>,</span><br><span class="line">    <span class="number">2532951952066291774890327666074100357898023013105443178881294700381509795270</span>,</span><br><span class="line">    <span class="number">2532951952066291774890554459287276604903130315859258544173068376967072335730</span>,</span><br><span class="line">    <span class="number">2532951952066291774890865328241532885391510162611534514014409174284299139015</span>,</span><br><span class="line">    <span class="number">2532951952066291774890830662608134156017946376309989934175833913921142609334</span></span><br><span class="line">]</span><br><span class="line">current = final_values.copy()</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">250</span>):</span><br><span class="line">    current = reverse_step(current)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_card</span>(<span class="params">v</span>):</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">22</span>):</span><br><span class="line">        <span class="keyword">if</span> k ^ -<span class="number">1</span> == v:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">f&quot;re-<span class="subst">&#123;Major_Arcana[k]&#125;</span>&quot;</span></span><br><span class="line">    index = v % <span class="number">78</span></span><br><span class="line">    card = tarot[index]</span><br><span class="line">    <span class="keyword">if</span> card <span class="keyword">in</span> Major_Arcana <span class="keyword">and</span> v == index:</span><br><span class="line">        <span class="keyword">return</span> card</span><br><span class="line">    <span class="keyword">return</span> card</span><br><span class="line">cards = [get_card(v) <span class="keyword">for</span> v <span class="keyword">in</span> current]</span><br><span class="line">flag = <span class="string">&quot;hgame&#123;&quot;</span> + <span class="string">&quot;&amp;&quot;</span>.join(cards).replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;_&quot;</span>) + <span class="string">&quot;&#125;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#hgame&#123;re-The_Moon&amp;re-The_Sun&amp;Judgement&amp;re-Temperance&amp;Six_of_Cups&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-Intergalactic-Bound"><a href="#2-Intergalactic-Bound" class="headerlink" title="2.Intergalactic Bound"></a>2.Intergalactic Bound</h2><p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> secrets <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_THCurve</span>(<span class="params">P, Q</span>):</span><br><span class="line">    <span class="keyword">if</span> P == (<span class="number">0</span>, <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> Q</span><br><span class="line">    <span class="keyword">if</span> Q == (<span class="number">0</span>, <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> P</span><br><span class="line">    x1, y1 = P</span><br><span class="line">    x2, y2 = Q</span><br><span class="line">    x3 = (x1 - y1 ** <span class="number">2</span> * x2 * y2) * <span class="built_in">pow</span>(a * x1 * y1 * x2 ** <span class="number">2</span> - y2, -<span class="number">1</span>, p) % p</span><br><span class="line">    y3 = (y1 * y2 ** <span class="number">2</span> - a * x1 ** <span class="number">2</span> * x2) * <span class="built_in">pow</span>(a * x1 * y1 * x2 ** <span class="number">2</span> - y2, -<span class="number">1</span>, p) % p</span><br><span class="line">    <span class="keyword">return</span> x3, y3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mul_THCurve</span>(<span class="params">n, P</span>):</span><br><span class="line">    R = (<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">            R = add_THCurve(R, P)</span><br><span class="line">        P = add_THCurve(P, P)</span><br><span class="line">        n = n // <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> R</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">96</span>)</span><br><span class="line">a = randint(<span class="number">1</span>, p)</span><br><span class="line">G = (randint(<span class="number">1</span>,p), randint(<span class="number">1</span>,p))</span><br><span class="line">d = (a*G[<span class="number">0</span>]^<span class="number">3</span>+G[<span class="number">1</span>]^<span class="number">3</span>+<span class="number">1</span>)%p*inverse(G[<span class="number">0</span>]*G[<span class="number">1</span>],p)%p</span><br><span class="line">x = randint(<span class="number">1</span>, p)</span><br><span class="line">Q = mul_THCurve(x, G)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;p = <span class="subst">&#123;p&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;G = <span class="subst">&#123;G&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Q = <span class="subst">&#123;Q&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">key = hashlib.sha256(<span class="built_in">str</span>(x).encode()).digest()</span><br><span class="line">cipher = AES.new(key, AES.MODE_ECB)</span><br><span class="line">flag = pad(flag,<span class="number">16</span>)</span><br><span class="line">ciphertext = cipher.encrypt(flag)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;ciphertext=<span class="subst">&#123;ciphertext&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">p = 55099055368053948610276786301</span></span><br><span class="line"><span class="string">G = (19663446762962927633037926740, 35074412430915656071777015320)</span></span><br><span class="line"><span class="string">Q = (26805137673536635825884330180, 26376833112609309475951186883)</span></span><br><span class="line"><span class="string">ciphertext=b&quot;k\xe8\xbe\x94\x9e\xfc\xe2\x9e\x97\xe5\xf3\x04&#x27;\x8f\xb2\x01T\x06\x88\x04\xeb3Jl\xdd Pk$\x00:\xf5&quot;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>add_THcurve部分符合符合<a href="https://www.hyperelliptic.org/EFD/g1p/auto-twistedhessian.html">https://www.hyperelliptic.org/EFD/g1p/auto-twistedhessian.html</a> 的定义。 所以按照文章里套换元 x’&#x3D;X&#x2F;Z y’&#x3D;Y&#x2F;Z 得到 a<em>x’^3+y’^3+z’^3&#x3D;d</em>x’<em>y’</em>z’这样构造出了齐次式子之后就可以构造椭圆曲线了。所以现在只需要求a的值即可代入脚本求解。因为</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = (a*G[<span class="number">0</span>]^<span class="number">3</span>+G[<span class="number">1</span>]^<span class="number">3</span>+<span class="number">1</span>)%p*inverse(G[<span class="number">0</span>]*G[<span class="number">1</span>],p)%p</span><br></pre></td></tr></table></figure>

<p>利用G和Q构造方程解出a</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = <span class="number">55099055368053948610276786301</span></span><br><span class="line">Gx = <span class="number">19663446762962927633037926740</span></span><br><span class="line">Gy = <span class="number">35074412430915656071777015320</span></span><br><span class="line">Qx = <span class="number">26805137673536635825884330180</span></span><br><span class="line">Qy = <span class="number">26376833112609309475951186883</span></span><br><span class="line"><span class="comment"># 计算 Gy^3 + 1 mod p</span></span><br><span class="line">Gy_cubed = <span class="built_in">pow</span>(Gy, <span class="number">3</span>, p)</span><br><span class="line">Gy_cubed_plus_1 = (Gy_cubed + <span class="number">1</span>) % p</span><br><span class="line"><span class="comment"># 计算 Qy^3 + 1 mod p</span></span><br><span class="line">Qy_cubed = <span class="built_in">pow</span>(Qy, <span class="number">3</span>, p)</span><br><span class="line">Qy_cubed_plus_1 = (Qy_cubed + <span class="number">1</span>) % p</span><br><span class="line"><span class="comment"># 计算分子：(Gy^3+1)*Qx*Qy - (Qy^3+1)*Gx*Gy mod p</span></span><br><span class="line">term1 = (Gy_cubed_plus_1 * Qx) % p</span><br><span class="line">term1 = (term1 * Qy) % p</span><br><span class="line">term2 = (Qy_cubed_plus_1 * Gx) % p</span><br><span class="line">term2 = (term2 * Gy) % p</span><br><span class="line">numerator = (term1 - term2) % p</span><br><span class="line"><span class="comment"># 计算分母：Qx^3*Gx*Gy - Gx^3*Qx*Qy mod p</span></span><br><span class="line">Qx_cubed = <span class="built_in">pow</span>(Qx, <span class="number">3</span>, p)</span><br><span class="line">term3 = (Qx_cubed * Gx) % p</span><br><span class="line">term3 = (term3 * Gy) % p</span><br><span class="line">Gx_cubed = <span class="built_in">pow</span>(Gx, <span class="number">3</span>, p)</span><br><span class="line">term4 = (Gx_cubed * Qx) % p</span><br><span class="line">term4 = (term4 * Qy) % p</span><br><span class="line">denominator = (term3 - term4) % p</span><br><span class="line"><span class="comment"># 计算逆元</span></span><br><span class="line">inv_denominator = <span class="built_in">pow</span>(denominator, -<span class="number">1</span>, p)</span><br><span class="line">a = (numerator * inv_denominator) % p</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment">#a=39081810733380615260725035189</span></span><br></pre></td></tr></table></figure>

<p>求得a的值构建出椭圆曲线后使用 Pohlig Hellman 即可解出 Q &#x3D; xG 中的 x</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">a = <span class="number">39081810733380615260725035189</span></span><br><span class="line">p = <span class="number">55099055368053948610276786301</span></span><br><span class="line">P = (<span class="number">19663446762962927633037926740</span>, <span class="number">35074412430915656071777015320</span>)</span><br><span class="line">Q = (<span class="number">26805137673536635825884330180</span>, <span class="number">26376833112609309475951186883</span>)</span><br><span class="line">d = (a * Q[<span class="number">0</span>] ** <span class="number">3</span> + Q[<span class="number">1</span>] ** <span class="number">3</span> + <span class="number">1</span>) * inverse(Q[<span class="number">0</span>] * Q[<span class="number">1</span>], p) % p</span><br><span class="line"><span class="comment"># construct ECC to get a solution of aX^3+Y^3+Z^3=dXYZ</span></span><br><span class="line">R.&lt;x,y,z&gt; = Zmod(p)[]</span><br><span class="line">cubic = a * x^<span class="number">3</span> + y^<span class="number">3</span> + z^<span class="number">3</span> - d*x*y*z</span><br><span class="line">E = EllipticCurve_from_cubic(cubic,morphism=<span class="literal">True</span>)</span><br><span class="line">P = E(P)</span><br><span class="line">Q = E(Q)</span><br><span class="line">P_ord = P.order()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Pohlig_Hellman</span>(<span class="params">n, P, Q</span>):</span><br><span class="line">    <span class="keyword">return</span> discrete_log(Q, P, <span class="built_in">ord</span>=n, operation=<span class="string">&#x27;+&#x27;</span>)</span><br><span class="line">x = Pohlig_Hellman(P_ord,P,Q)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="comment">#x=2633177798829352921583206736</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> unpad</span><br><span class="line">x = <span class="number">2633177798829352921583206736</span></span><br><span class="line">key = hashlib.sha256(<span class="built_in">str</span>(x).encode()).digest()</span><br><span class="line">cipher = AES.new(key, AES.MODE_ECB)</span><br><span class="line">ciphertext = <span class="string">b&quot;k\xe8\xbe\x94\x9e\xfc\xe2\x9e\x97\xe5\xf3\x04&#x27;\x8f\xb2\x01T\x06\x88\x04\xeb3Jl\xdd Pk$\x00:\xf5&quot;</span></span><br><span class="line">decrypted_flag = unpad(cipher.decrypt(ciphertext), <span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;解密后的数据: <span class="subst">&#123;decrypted_flag&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment">#解密后的数据: b&#x27;hgame&#123;N0th1ng_bu7_up_Up_UP!&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-Spica"><a href="#3-Spica" class="headerlink" title="3.Spica"></a>3.Spica</h2><p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, long_to_bytes,bytes_to_long</span><br><span class="line"><span class="keyword">from</span> secrets <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">derive_M</span>(<span class="params">n</span>):</span><br><span class="line">    iota=<span class="number">0.035</span></span><br><span class="line">    Mbits=<span class="built_in">int</span>(<span class="number">2</span> * iota * n^<span class="number">2</span> + n * log(n,<span class="number">2</span>))</span><br><span class="line">    M = random_prime(<span class="number">2</span>^Mbits, proof = <span class="literal">False</span>, lbound = <span class="number">2</span>^(Mbits - <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> Integer(M)</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag).bit_length()</span><br><span class="line">n = <span class="number">70</span></span><br><span class="line">p = derive_M(n)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">F = GF(p)</span><br><span class="line">x = random_matrix(F, <span class="number">1</span>, n)</span><br><span class="line">A = random_matrix(ZZ, n, m, x=<span class="number">0</span>, y=<span class="number">2</span>)</span><br><span class="line">A[randint(<span class="number">0</span>, n-<span class="number">1</span>)] = vector(ZZ, <span class="built_in">list</span>(<span class="built_in">bin</span>(bytes_to_long(flag))[<span class="number">2</span>:]))</span><br><span class="line">h = x*A</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;data.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(<span class="built_in">str</span>(m) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    file.write(<span class="built_in">str</span>(p) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> h:</span><br><span class="line">        file.write(<span class="built_in">str</span>(item) + <span class="string">&quot;\n&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>隐子集和问题（HSSP &#x2F; Hidden Subset Sum Problem）。解题参考：<a href="https://yanmo312.github.io/2022/11/26/gemima_6/#%E4%B8%89%E3%80%81%E9%9A%90%E5%AD%90%E9%9B%86%E5%92%8C%E9%97%AE%E9%A2%98%EF%BC%88HSSP-Hidden-Subset-Sum-Problem%EF%BC%89">https://yanmo312.github.io/2022/11/26/gemima_6/#%E4%B8%89%E3%80%81%E9%9A%90%E5%AD%90%E9%9B%86%E5%92%8C%E9%97%AE%E9%A2%98%EF%BC%88HSSP-Hidden-Subset-Sum-Problem%EF%BC%89</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_data</span>(<span class="params">filename</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        m = <span class="built_in">int</span>(f.readline().strip())</span><br><span class="line">        n = <span class="number">70</span></span><br><span class="line">        p = <span class="built_in">int</span>(f.readline().strip())</span><br><span class="line">        h_line = f.readline().strip() </span><br><span class="line">        w = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, h_line[<span class="number">1</span>:-<span class="number">1</span>].split(<span class="string">&#x27;, &#x27;</span>))) </span><br><span class="line">    <span class="keyword">return</span> m, n, p, w</span><br><span class="line"><span class="comment"># 生成 orthoLattice 的相关函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">orthoLattice</span>(<span class="params">b, x0</span>):</span><br><span class="line">    m = b.length()</span><br><span class="line">    M = Matrix(ZZ, m, m)</span><br><span class="line">    <span class="comment"># 生成正交矩阵</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m):</span><br><span class="line">        M[i, i] = <span class="number">1</span></span><br><span class="line">    M[<span class="number">1</span>:m, <span class="number">0</span>] = -b[<span class="number">1</span>:m] * inverse_mod(b[<span class="number">0</span>], x0)</span><br><span class="line">    M[<span class="number">0</span>, <span class="number">0</span>] = x0</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m):</span><br><span class="line">        M[i, <span class="number">0</span>] = mod(M[i, <span class="number">0</span>], x0)</span><br><span class="line">    <span class="keyword">return</span> M</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">allpmones</span>(<span class="params">v</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>([vj <span class="keyword">for</span> vj <span class="keyword">in</span> v <span class="keyword">if</span> vj <span class="keyword">in</span> [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]]) == <span class="built_in">len</span>(v)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">allones</span>(<span class="params">v</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">all</span>(vj <span class="keyword">in</span> (<span class="number">0</span>, <span class="number">1</span>) <span class="keyword">for</span> vj <span class="keyword">in</span> v):</span><br><span class="line">        <span class="keyword">return</span> v</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">all</span>(vj <span class="keyword">in</span> (<span class="number">0</span>, -<span class="number">1</span>) <span class="keyword">for</span> vj <span class="keyword">in</span> v):</span><br><span class="line">        <span class="keyword">return</span> -v</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"><span class="comment"># 恢复只包含 &#123;0,1&#125; 或 &#123;-1,0,1&#125; 的向量</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recoverBinary</span>(<span class="params">M5</span>):</span><br><span class="line">    lv = [allones(vi) <span class="keyword">for</span> vi <span class="keyword">in</span> M5 <span class="keyword">if</span> allones(vi)]</span><br><span class="line">    n = M5.nrows()</span><br><span class="line">    <span class="keyword">for</span> v <span class="keyword">in</span> lv:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            nv = allones(M5[i] - v)</span><br><span class="line">            <span class="keyword">if</span> nv <span class="keyword">and</span> nv <span class="keyword">not</span> <span class="keyword">in</span> lv:</span><br><span class="line">                lv.append(nv)</span><br><span class="line">            nv = allones(M5[i] + v)</span><br><span class="line">            <span class="keyword">if</span> nv <span class="keyword">and</span> nv <span class="keyword">not</span> <span class="keyword">in</span> lv:</span><br><span class="line">                lv.append(nv)</span><br><span class="line">    <span class="keyword">return</span> Matrix(lv)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">kernelLLL</span>(<span class="params">M</span>):</span><br><span class="line">    n = M.nrows()</span><br><span class="line">    m = M.ncols()</span><br><span class="line">    <span class="keyword">if</span> m &lt; <span class="number">2</span> * n:</span><br><span class="line">        <span class="keyword">return</span> M.right_kernel().matrix()</span><br><span class="line">    K = <span class="number">2</span> ^ (m // <span class="number">2</span>) * M.height()</span><br><span class="line">    MB = Matrix(ZZ, m + n, m)</span><br><span class="line">    MB[:n] = K * M</span><br><span class="line">    MB[n:] = identity_matrix(m)</span><br><span class="line">    MB2 = MB.T.LLL().T</span><br><span class="line">    <span class="keyword">assert</span> MB2[:n, : m - n] == <span class="number">0</span></span><br><span class="line">    Ke = MB2[n:, : m - n].T</span><br><span class="line">    <span class="keyword">return</span> Ke</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">attack</span>(<span class="params">m, n, p, w</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;n =&quot;</span>, n, <span class="string">&quot;m =&quot;</span>, m)</span><br><span class="line">    iota = <span class="number">0.035</span></span><br><span class="line">    nx0 = <span class="built_in">int</span>(<span class="number">2</span> * iota * n^<span class="number">2</span> + n * log(n, <span class="number">2</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;nx0 =&quot;</span>, nx0)</span><br><span class="line">    x0 = p</span><br><span class="line">    b = vector(w)</span><br><span class="line">    M = orthoLattice(b, x0)</span><br><span class="line">    t = time.time()</span><br><span class="line">    M2 = M.LLL()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;LLL step1: %.1f&quot;</span> % (time.time() - t))</span><br><span class="line">    MOrtho = M2[: m - n]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;log(Height, 2) = &quot;</span>, <span class="built_in">int</span>(log(MOrtho.height(), <span class="number">2</span>)))</span><br><span class="line">    t2 = time.time()</span><br><span class="line">    ke = kernelLLL(MOrtho)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Kernel: %.1f&quot;</span> % (time.time() - t2))</span><br><span class="line">    <span class="keyword">if</span> n &gt; <span class="number">170</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    beta = <span class="number">2</span></span><br><span class="line">    tbk = time.time()</span><br><span class="line">    <span class="keyword">while</span> beta &lt; n:</span><br><span class="line">        <span class="keyword">if</span> beta == <span class="number">2</span>:</span><br><span class="line">            M5 = ke.LLL()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            M5 = M5.BKZ(block_size=beta)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>([<span class="literal">True</span> <span class="keyword">for</span> v <span class="keyword">in</span> M5 <span class="keyword">if</span> allpmones(v)]) == n:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> beta == <span class="number">2</span>:</span><br><span class="line">            beta = <span class="number">10</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            beta += <span class="number">10</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;BKZ beta=%d: %.1f&quot;</span> % (beta, time.time() - tbk))</span><br><span class="line">    t2 = time.time()</span><br><span class="line">    MB = recoverBinary(M5)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Recovery: %.1f&quot;</span> % (time.time() - t2))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Number of recovered vector = &quot;</span>, MB.nrows())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Number of recovered vector.T = &quot;</span>, MB.ncols())</span><br><span class="line">    <span class="keyword">return</span> MB</span><br><span class="line">m, n, p, w = read_data(<span class="string">&#x27;data.txt&#x27;</span>)</span><br><span class="line">res = attack(m, n, p, w)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bits_to_long</span>(<span class="params">bits</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(<span class="string">&#x27;&#x27;</span>.join(<span class="built_in">str</span>(bit) <span class="keyword">for</span> bit <span class="keyword">in</span> bits), <span class="number">2</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extract_flags</span>(<span class="params">MB</span>):</span><br><span class="line">    flags = []</span><br><span class="line">    <span class="comment"># 遍历 MB 的每一行，将每一行转换为一个二进制数字</span></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> MB:</span><br><span class="line">        flag_bits = [<span class="built_in">int</span>(element) <span class="keyword">for</span> element <span class="keyword">in</span> row]  <span class="comment"># 获取每行的二进制位</span></span><br><span class="line">        flag_long = bits_to_long(flag_bits)  <span class="comment"># 转换为整数</span></span><br><span class="line">        flag = long_to_bytes(flag_long)  <span class="comment"># 转换为字节串</span></span><br><span class="line">        flags.append(flag)    </span><br><span class="line">    <span class="keyword">return</span> flags</span><br><span class="line">flags = extract_flags(res)</span><br><span class="line"><span class="keyword">for</span> flag <span class="keyword">in</span> flags:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Recovered flag: <span class="subst">&#123;flag&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment">#Recovered flag: b&#x27;hgame&#123;U_f0und_3he_5pec14l_0n3!&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>感觉代码最后加个对flag的处理，判断只有符合hgame{}格式的flag输出会好点（但数据不是很大，还是一眼就从输出里找到正确flag）。输出部分还是很好找的是吧（</p>
<p>最后说明这是第一次尝试写wp，肯定有很多不足之处，会继续在日后一点一点完善这个过程。</p>
]]></content>
      <tags>
        <tag>crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>格密码学初步学习</title>
    <url>/2025/01/22/%E6%A0%BC%E5%AF%86%E7%A0%81%E5%AD%A6%E5%88%9D%E6%AD%A5%E5%AD%A6%E4%B9%A0.html</url>
    <content><![CDATA[<p>懒惰的我终于开始初步学习密码学中格的相关内容了，虽然很早之前就看过了，但是由于东西实在是太多了根本看不下去，看了也不理解。现在再次开始密码学之路，这篇文章算是边学边理解的感悟吧。</p>
<h1 id="格的认识"><a href="#格的认识" class="headerlink" title="格的认识"></a>格的认识</h1><p>经过学长的点明后，对于我目前学习最初步的格来说就把格理解为线性向量，把线性代数的知识运用上去，无非就是换了很多全新的名词，本质上按线性向量去理解会轻松很多。所以说还是要有一定线代基础不然还是很难接受（但线代本身也确实很抽象😢）</p>
<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a>problem</h2><p>目前看过来分为svp（shortest vector problem）最短向量问题和cvp（closest vector problem)最近向量问题。两个名字看中文感觉就是一回事最短和最近，但事实上区别很大。</p>
<h3 id="SVP"><a href="#SVP" class="headerlink" title="SVP"></a>SVP</h3><p>感觉正式讲法很难理解，我自己想法就是格中有一组基向量【b1，b2】以及很多点，要通过基向量找到一个点，使得这个点离原点最近，而λ1就是最短向量。有时候因为基的点分布并不理想，很多时候找出来的是最短向量λ1的倍数，这就是svp的宽松版本了。<img src="/svp.png" alt="svp"></p>
<h3 id="CVP"><a href="#CVP" class="headerlink" title="CVP"></a>CVP</h3><p>在基中找一个点t，找到距离这个点最近的格点。换句话理解就是找到一个向量λ1使得t向量（蓝色线）与λ1相减后得到的向量μ最短。同样存在cvp的宽松版本，如图中2μ，只不过目前我对于宽松版本还未很好理解。<img src="/%E6%A0%BC%E5%AF%86%E7%A0%81%E5%88%9D%E6%AD%A5%E5%AD%A6%E4%B9%A0%5Ccvp.png" alt="cvp"></p>
<h2 id="LLL算法"><a href="#LLL算法" class="headerlink" title="LLL算法"></a>LLL算法</h2><p>嗯感觉这个原理非常复杂，想理解目前水平做不到，差不多想就是LLL是一个格基约化算法，作用是将上面图片中格变得更加整齐（就是把图中倾斜绿色点变得和坐标轴一样整齐）。反正目前做一些初步题大概就是按题目意思构造一个合理的格然后对格直接用LLL.( )会得到一个短向量，然后从这些向量中可以找到我们需要的，然后差不多就可以解出题目。所以不需要理解直接用吧😢然后顺带提一下BKZ算法，也是理解为更高级的LLL，直接用别管原理什么的。</p>
]]></content>
      <tags>
        <tag>crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>typora测试</title>
    <url>/2024/11/21/typora%E6%B5%8B%E8%AF%95.html</url>
    <content><![CDATA[<p>尝试用typora写一篇博客，此文章仅做测试使用</p>
]]></content>
  </entry>
  <entry>
    <title>RSA中leak=p^q%n + q^p%n问题</title>
    <url>/2025/02/27/RSA%E4%B8%ADleak%E9%97%AE%E9%A2%98.html</url>
    <content><![CDATA[<h1 id="RSA中leak-p-q-n-q-p-n问题"><a href="#RSA中leak-p-q-n-q-p-n问题" class="headerlink" title="RSA中leak&#x3D;p^q%n + q^p%n问题"></a>RSA中leak&#x3D;p^q%n + q^p%n问题</h1><p>以ISCTF2024crypto蓝鲨的费马这道题为例子讲解自己学到的一个解决方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">flag=<span class="string">b&#x27;ISCTF&#123;********&#125;&#x27;</span></span><br><span class="line">m=bytes_to_long(flag)</span><br><span class="line">p=libnum.generate_prime(<span class="number">1024</span>)</span><br><span class="line">q=libnum.generate_prime(<span class="number">1024</span>)</span><br><span class="line">n=p*q</span><br><span class="line">e=<span class="number">0x10001</span></span><br><span class="line">c=<span class="built_in">pow</span>(m,e,n)</span><br><span class="line">d=inverse(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">leak = (d+(<span class="built_in">pow</span>(p,q,n)+<span class="built_in">pow</span>(q,p,n)))%n</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c=&quot;</span>, c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n=&quot;</span>, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;leak=&quot;</span>, leak)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">c= 8989289659072309605793417141528767265266446236550650613514493589798432446586991233583435051268377555448062724563967695425657559568596372723980081067589103919296476501677424322525079257328042851349095575718347302884996529329066703597604694781627113384086536158793653551546025090807063130353950841148535682974762381044510423210397947080397718080033363000599995100765708244828566873128882878164321817156170983773105693537799111546309755235573342169431295776881832991533489235535981382958295960435126843833532716436804949502318851112378495533302256759494573250596802016112398817816155228378089079806308296705261876583997</span></span><br><span class="line"><span class="string">n= 13424018200035368603483071894166480724482952594135293395398366121467209427078817227870501294732149372214083432516059795712917132804111155585926502759533393295089100965059106772393520277313184519450478832376508528256865861027444446718552169503579478134286009893965458507369983396982525906466073384013443851551139147777507283791250268462136554061959016630318688169168797939873600493494258467352326974238472394214986505312411729432927489878418792288365594455065912126527908319239444514857325441614280498882524432151918146061570116187524918358453036228204087993064505391742062288050068745930452767100091519798860487150247</span></span><br><span class="line"><span class="string">leak= 9192002086528025412361053058922669469031188193149143635074798633855112230489479254740324032262690315813650428270911079121913869290893574897752990491429582640499542165616254566396564016734157323265631446079744216458719690853526969359930225042993006404843355356540487296896949431969541367144841985153231095140361069256753593550199420993461786814074270171257117410848796614931926182811404655619662690700351986753661502438299236428991412206196135090756862851230228396476709412020941670878645924203989895008014836619321109848938770269989596541278600166088022166386213646074764712810133558692545401032391239330088256431881</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>$1.\text{leak} &#x3D; d + p + q$  其中 leak 简写为 L</p>
<p>$2. m &#x3D; \text{pow}(c, d, n)，即 m &#x3D; c^d \mod n.$</p>
<p>$3.d &#x3D; L - (p + q) .$</p>
<p>根据欧拉函数的定义：$\phi &#x3D; (p - 1)(q - 1) &#x3D; pq - p - q + 1$</p>
<p>由于  n &#x3D; pq ，因此：$\phi &#x3D; n + 1 - (p + q)$</p>
<p>根据欧拉定理:$c^\phi \equiv1 \mod n$</p>
<p>代入 $\phi$的表达式：$c^{n + 1 - (p + q)} \equiv 1 \mod n$</p>
<p>可以进一步推导：$c^{n + 1} \equiv c^{p + q} \mod n$</p>
<p>因此:$c^{n + 1} \equiv c^{p + q} \mod n$</p>
<p>已知  d &#x3D; L - (p + q) ，代入 $c^d  \mod n &#x3D; m$ ：</p>
<p>$c^{L - (p + q)} \mod n &#x3D; m$</p>
<p>根据前面的推导：$c^{n + 1} \equiv c^{p + q} \mod n$</p>
<p>因此：$c^{L - (n + 1)} \mod n &#x3D; m$</p>
<p>$m &#x3D; \text{pow}(c, L - n - 1, n)$</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c= <span class="number">8989289659072309605793417141528767265266446236550650613514493589798432446586991233583435051268377555448062724563967695425657559568596372723980081067589103919296476501677424322525079257328042851349095575718347302884996529329066703597604694781627113384086536158793653551546025090807063130353950841148535682974762381044510423210397947080397718080033363000599995100765708244828566873128882878164321817156170983773105693537799111546309755235573342169431295776881832991533489235535981382958295960435126843833532716436804949502318851112378495533302256759494573250596802016112398817816155228378089079806308296705261876583997</span></span><br><span class="line">n= <span class="number">13424018200035368603483071894166480724482952594135293395398366121467209427078817227870501294732149372214083432516059795712917132804111155585926502759533393295089100965059106772393520277313184519450478832376508528256865861027444446718552169503579478134286009893965458507369983396982525906466073384013443851551139147777507283791250268462136554061959016630318688169168797939873600493494258467352326974238472394214986505312411729432927489878418792288365594455065912126527908319239444514857325441614280498882524432151918146061570116187524918358453036228204087993064505391742062288050068745930452767100091519798860487150247</span></span><br><span class="line">leak= <span class="number">9192002086528025412361053058922669469031188193149143635074798633855112230489479254740324032262690315813650428270911079121913869290893574897752990491429582640499542165616254566396564016734157323265631446079744216458719690853526969359930225042993006404843355356540487296896949431969541367144841985153231095140361069256753593550199420993461786814074270171257117410848796614931926182811404655619662690700351986753661502438299236428991412206196135090756862851230228396476709412020941670878645924203989895008014836619321109848938770269989596541278600166088022166386213646074764712810133558692545401032391239330088256431881</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes, inverse</span><br><span class="line">m=<span class="built_in">pow</span>(c,leak-n-<span class="number">1</span>,n)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line">flag=long_to_bytes(m)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#b&#x27;ISCTF&#123;u_got_it&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>中国剩余定理</title>
    <url>/2025/03/30/%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86.html</url>
    <content><![CDATA[<h1 id="中国剩余定理（CRT"><a href="#中国剩余定理（CRT" class="headerlink" title="中国剩余定理（CRT)"></a>中国剩余定理（CRT)</h1><p>在做题时遇到离散对数问题中碰到很多CRT相关知识，但最初了解比较浅显，现在准备再稍微细致的回顾一下。</p>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>中国剩余定理 (Chinese Remainder Theorem, CRT) 可求解如下形式的一元线性同余方程组（其中$n_1$ $n_2$ ······$n_k$ 两两互质)：</p>
<p>$$<br>\begin{cases} x\equiv a_1 \pmod{n_1}\\ x\equiv a_2 \pmod{n_2}\\ x\equiv a_3 \pmod{n_3}\\ ·····\\ ·····\\ ·····\\ x\equiv a_k \pmod{n_k} \end{cases}<br>$$</p>
<h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><h3 id="1-计算所有模数的积-n；n-n-1-n-2-···n-k"><a href="#1-计算所有模数的积-n；n-n-1-n-2-···n-k" class="headerlink" title="1.计算所有模数的积 n；n&#x3D;$n_1*n_2*···n_k$"></a>1.计算所有模数的积 n；n&#x3D;$n_1*n_2*···n_k$</h3><h3 id="2-对于第-i个方程"><a href="#2-对于第-i个方程" class="headerlink" title="2.对于第 i个方程:"></a>2.对于第 i个方程:</h3><p>​		a.计算$m_i&#x3D;n&#x2F;n_i$;</p>
<p>​		b.计算$m_i在模n_i意义下的逆元m_i^{-1}$;      逆元$m_im_i^{-1}\equiv 1\pmod{n_i}$</p>
<p>​		c.计算$c_i&#x3D;m_im_i^{-1}$</p>
<h3 id="3-方程组在模n意义下的唯一解为-x-sum-i-1-k-a-ic-i-pmod-n"><a href="#3-方程组在模n意义下的唯一解为-x-sum-i-1-k-a-ic-i-pmod-n" class="headerlink" title="3.方程组在模n意义下的唯一解为$x&#x3D;\sum_{i&#x3D;1}^{k}{a_ic_i}\pmod{n}$"></a>3.方程组在模n意义下的唯一解为$x&#x3D;\sum_{i&#x3D;1}^{k}{a_ic_i}\pmod{n}$</h3><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">CRT</span>(<span class="params">k, a, r</span>):</span><br><span class="line">    n = <span class="number">1</span></span><br><span class="line">    ans = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, k + <span class="number">1</span>):</span><br><span class="line">        n = n * r[i]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, k + <span class="number">1</span>):</span><br><span class="line">        m = n // r[i]</span><br><span class="line">        b =y=<span class="number">0</span></span><br><span class="line">        exgcd(m, r[i], b, y)  <span class="comment"># b * m mod r[i] = 1  exgcd是另一个用来求逆元的自定义函数未标</span></span><br><span class="line">        ans = (ans + a[i] * m * b % n) % n</span><br><span class="line">    <span class="keyword">return</span> (ans % n + n) % n</span><br></pre></td></tr></table></figure>

<p>当然了上述代码可能更多用于算法题中，密码学里python有很多强大的库可以直接调用CRT</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sympy.ntheory.modular <span class="keyword">import</span> crt</span><br><span class="line">a_list=[a1,a2,a3,····ak]</span><br><span class="line">n_list=[n1,n2,n3,····nk]</span><br><span class="line">x,n=crt(n_list,c_list)    //crt会返回一个元组（x,N）其中x就是我们所需要的通解，n就是所有模数（n1,n2等）的乘积</span><br></pre></td></tr></table></figure>

<h2 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h2><p>虽然说密码学里直接秒了，但我还是觉得搞清背后逻辑会更有理解。</p>
<p>$当i\neq j时，有m_j\equiv 0 \pmod{n_i}$</p>
<p>$这是因为m_j&#x3D;n&#x2F;n_j$</p>
<p>$所以c_j \equiv 0 \pmod{n_i},c_i\equiv 1 \pmod{n_i} $</p>
<p>$ x \equiv \sum_{j&#x3D;1}^{k}{a_jc_j} \equiv a_ic_i\equiv a_i\pmod{n_i}$</p>
<p>$对于任意的i的取值均符合x\equiv a_i \pmod{n_i}$</p>
<p>所以上述方法可行</p>
]]></content>
      <tags>
        <tag>crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>近期密码复现学习</title>
    <url>/2025/04/05/%E8%BF%91%E6%9C%9F%E5%AF%86%E7%A0%81%E5%A4%8D%E7%8E%B0%E5%AD%A6%E4%B9%A0.html</url>
    <content><![CDATA[<h3 id="1-univariate"><a href="#1-univariate" class="headerlink" title="1.univariate"></a>1.univariate</h3><p>题目</p>
<p>描述</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">I love univariate polynomials...</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, bytes_to_long</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p*q</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag.encode())</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line">P.&lt;x&gt; = PolynomialRing(ZZ)</span><br><span class="line">x = P.gens()[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">terms = [x**i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">137</span>)]</span><br><span class="line"></span><br><span class="line">T = RealDistribution(<span class="string">&#x27;gaussian&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">coefs = [<span class="built_in">round</span>(T.get_random_element()) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(terms))]</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">sum</span>([term*coef <span class="keyword">for</span> term,coef <span class="keyword">in</span> <span class="built_in">zip</span>(terms,coefs)])</span><br><span class="line">w = <span class="built_in">pow</span>(<span class="number">2</span>,f(p),n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;out.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(<span class="string">f&#x27;<span class="subst">&#123;n = &#125;</span>\n&#x27;</span>)</span><br><span class="line">    file.write(<span class="string">f&#x27;<span class="subst">&#123;e = &#125;</span>\n&#x27;</span>)</span><br><span class="line">    file.write(<span class="string">f&#x27;<span class="subst">&#123;c = &#125;</span>\n&#x27;</span>)</span><br><span class="line">    file.write(<span class="string">f&#x27;<span class="subst">&#123;f = &#125;</span>\n&#x27;</span>)</span><br><span class="line">    file.write(<span class="string">f&#x27;<span class="subst">&#123;w = &#125;</span>\n&#x27;</span>)</span><br><span class="line">n = <span class="number">151510886600487624888537926759375027338192556324330182365859112926770109752858284462159488504727238764120612593911292154858008775463001345641311051184326218974685701057787672193003745574697137968457609530135969033403360561333863943223407215732526198691453110628598401583407984162075630768455052482583101773637</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">74468088842131664480394073891613024559473817230309311952320910922177130990996003196602702376336093457990873018154873841543712071422931358036924937335888815556064840522100618318507080665149514719351519909821468981883880543654015414713368018500970500498936910817336501949914675483148862843329341461828563728789</span></span><br><span class="line">f = -x^<span class="number">136</span> + x^<span class="number">135</span> - <span class="number">2</span>*x^<span class="number">134</span> - <span class="number">4</span>*x^<span class="number">132</span> + <span class="number">2</span>*x^<span class="number">130</span> - x^<span class="number">128</span> - <span class="number">3</span>*x^<span class="number">127</span> + <span class="number">4</span>*x^<span class="number">126</span> + <span class="number">3</span>*x^<span class="number">125</span> + <span class="number">3</span>*x^<span class="number">124</span> + x^<span class="number">123</span> + x^<span class="number">122</span> - <span class="number">5</span>*x^<span class="number">121</span> - <span class="number">3</span>*x^<span class="number">120</span> - x^<span class="number">119</span> - x^<span class="number">118</span> + x^<span class="number">117</span> + x^<span class="number">116</span> - <span class="number">4</span>*x^<span class="number">114</span> - <span class="number">2</span>*x^<span class="number">112</span> + <span class="number">2</span>*x^<span class="number">110</span> + x^<span class="number">109</span> + <span class="number">2</span>*x^<span class="number">108</span> - <span class="number">2</span>*x^<span class="number">107</span> + <span class="number">3</span>*x^<span class="number">106</span> - x^<span class="number">104</span> + <span class="number">2</span>*x^<span class="number">103</span> - x^<span class="number">102</span> + x^<span class="number">101</span> - <span class="number">2</span>*x^<span class="number">100</span> + <span class="number">3</span>*x^<span class="number">99</span> - <span class="number">2</span>*x^<span class="number">98</span> - x^<span class="number">97</span> - x^<span class="number">96</span> - <span class="number">3</span>*x^<span class="number">95</span> - x^<span class="number">94</span> - <span class="number">2</span>*x^<span class="number">93</span> - <span class="number">2</span>*x^<span class="number">91</span> + <span class="number">3</span>*x^<span class="number">90</span> - <span class="number">2</span>*x^<span class="number">89</span> - <span class="number">2</span>*x^<span class="number">88</span> + x^<span class="number">86</span> + x^<span class="number">85</span> - <span class="number">2</span>*x^<span class="number">84</span> - <span class="number">3</span>*x^<span class="number">83</span> + <span class="number">2</span>*x^<span class="number">82</span> + <span class="number">3</span>*x^<span class="number">79</span> - x^<span class="number">76</span> + <span class="number">2</span>*x^<span class="number">75</span> - x^<span class="number">74</span> + x^<span class="number">71</span> - <span class="number">5</span>*x^<span class="number">70</span> - x^<span class="number">67</span> + x^<span class="number">66</span> + x^<span class="number">65</span> + x^<span class="number">63</span> - x^<span class="number">61</span> + x^<span class="number">59</span> - <span class="number">2</span>*x^<span class="number">58</span> + <span class="number">6</span>*x^<span class="number">56</span> + x^<span class="number">55</span> + <span class="number">3</span>*x^<span class="number">54</span> - x^<span class="number">53</span> + <span class="number">2</span>*x^<span class="number">52</span> + <span class="number">3</span>*x^<span class="number">51</span> + x^<span class="number">50</span> + <span class="number">2</span>*x^<span class="number">49</span> + <span class="number">3</span>*x^<span class="number">47</span> + <span class="number">2</span>*x^<span class="number">46</span> - <span class="number">4</span>*x^<span class="number">45</span> + <span class="number">3</span>*x^<span class="number">44</span> + <span class="number">3</span>*x^<span class="number">43</span> - x^<span class="number">42</span> - <span class="number">2</span>*x^<span class="number">40</span> - <span class="number">5</span>*x^<span class="number">39</span> + x^<span class="number">38</span> + x^<span class="number">37</span> + <span class="number">2</span>*x^<span class="number">36</span> + <span class="number">2</span>*x^<span class="number">35</span> + x^<span class="number">34</span> - x^<span class="number">33</span> + x^<span class="number">32</span> - <span class="number">5</span>*x^<span class="number">31</span> + x^<span class="number">30</span> + x^<span class="number">29</span> + <span class="number">2</span>*x^<span class="number">28</span> - <span class="number">2</span>*x^<span class="number">27</span> + <span class="number">3</span>*x^<span class="number">26</span> - x^<span class="number">25</span> - x^<span class="number">23</span> - x^<span class="number">22</span> - <span class="number">3</span>*x^<span class="number">21</span> + <span class="number">2</span>*x^<span class="number">20</span> - x^<span class="number">19</span> - x^<span class="number">17</span> + <span class="number">2</span>*x^<span class="number">16</span> - <span class="number">2</span>*x^<span class="number">15</span> - <span class="number">2</span>*x^<span class="number">14</span> - <span class="number">2</span>*x^<span class="number">13</span> - <span class="number">2</span>*x^<span class="number">12</span> + <span class="number">2</span>*x^<span class="number">11</span> - <span class="number">2</span>*x^<span class="number">9</span> + <span class="number">3</span>*x^<span class="number">8</span> - <span class="number">4</span>*x^<span class="number">7</span> + <span class="number">2</span>*x^<span class="number">6</span> - <span class="number">2</span>*x^<span class="number">5</span> - <span class="number">5</span>*x^<span class="number">4</span> - <span class="number">3</span>*x^<span class="number">3</span> + <span class="number">5</span>*x^<span class="number">2</span> - <span class="number">2</span></span><br><span class="line">w = <span class="number">86258923706084556733053644452456806418792871483898871193707132372143291757396867798433017660985422614532352743658877188445517898648519256573663299464811234251773841741466280567326570167017786562044635756348763128567054349991798640926148221279889174229551074668002853442182664523748992260830782387602048836221</span></span><br></pre></td></tr></table></figure>

<p>思路：<br>根据题目描述univariate polynomials（单变量多项式），题目中也是反复利用p，所以可以从p开始下手。  从    w &#x3D; pow(2,f(p),n)开始，这里也是我学习中感觉非常巧妙的地方，先了解前提知识费马小定理gcd(a,p)&#x3D;1,$a^{p-1}\equiv 1\pmod{p}$,于是接下来就要构造出p-1。对f(p)模(p-1),就有f(p) &#x3D; g(p)(p-1) + k。然后对w取p的模数。<br>$$<br>w &#x3D; 2^{f(p)} &#x3D; 2^{g(p)(p-1) + k} &#x3D; \left(2^{g(p)(p-1)}\right) \cdot \left(2^k\right)&#x3D;2^k \pmod{p}<br>$$<br>所以w除以p的模数就为2^k, 那么$w-2^{k}$​就为p的倍数，然后再与n取最大公约数就可以找出p从而解决RSA问题。即gcd(w-2^k,n).</p>
<p>代码(<strong>错误的</strong>)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">P.&lt;x&gt; = PolynomialRing(ZZ)</span><br><span class="line">x = P.gens()[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">n = <span class="number">151510886600487624888537926759375027338192556324330182365859112926770109752858284462159488504727238764120612593911292154858008775463001345641311051184326218974685701057787672193003745574697137968457609530135969033403360561333863943223407215732526198691453110628598401583407984162075630768455052482583101773637</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">74468088842131664480394073891613024559473817230309311952320910922177130990996003196602702376336093457990873018154873841543712071422931358036924937335888815556064840522100618318507080665149514719351519909821468981883880543654015414713368018500970500498936910817336501949914675483148862843329341461828563728789</span></span><br><span class="line">f = -x^<span class="number">136</span> + x^<span class="number">135</span> - <span class="number">2</span>*x^<span class="number">134</span> - <span class="number">4</span>*x^<span class="number">132</span> + <span class="number">2</span>*x^<span class="number">130</span> - x^<span class="number">128</span> - <span class="number">3</span>*x^<span class="number">127</span> + <span class="number">4</span>*x^<span class="number">126</span> + <span class="number">3</span>*x^<span class="number">125</span> + <span class="number">3</span>*x^<span class="number">124</span> + x^<span class="number">123</span> + x^<span class="number">122</span> - <span class="number">5</span>*x^<span class="number">121</span> - <span class="number">3</span>*x^<span class="number">120</span> - x^<span class="number">119</span> - x^<span class="number">118</span> + x^<span class="number">117</span> + x^<span class="number">116</span> - <span class="number">4</span>*x^<span class="number">114</span> - <span class="number">2</span>*x^<span class="number">112</span> + <span class="number">2</span>*x^<span class="number">110</span> + x^<span class="number">109</span> + <span class="number">2</span>*x^<span class="number">108</span> - <span class="number">2</span>*x^<span class="number">107</span> + <span class="number">3</span>*x^<span class="number">106</span> - x^<span class="number">104</span> + <span class="number">2</span>*x^<span class="number">103</span> - x^<span class="number">102</span> + x^<span class="number">101</span> - <span class="number">2</span>*x^<span class="number">100</span> + <span class="number">3</span>*x^<span class="number">99</span> - <span class="number">2</span>*x^<span class="number">98</span> - x^<span class="number">97</span> - x^<span class="number">96</span> - <span class="number">3</span>*x^<span class="number">95</span> - x^<span class="number">94</span> - <span class="number">2</span>*x^<span class="number">93</span> - <span class="number">2</span>*x^<span class="number">91</span> + <span class="number">3</span>*x^<span class="number">90</span> - <span class="number">2</span>*x^<span class="number">89</span> - <span class="number">2</span>*x^<span class="number">88</span> + x^<span class="number">86</span> + x^<span class="number">85</span> - <span class="number">2</span>*x^<span class="number">84</span> - <span class="number">3</span>*x^<span class="number">83</span> + <span class="number">2</span>*x^<span class="number">82</span> + <span class="number">3</span>*x^<span class="number">79</span> - x^<span class="number">76</span> + <span class="number">2</span>*x^<span class="number">75</span> - x^<span class="number">74</span> + x^<span class="number">71</span> - <span class="number">5</span>*x^<span class="number">70</span> - x^<span class="number">67</span> + x^<span class="number">66</span> + x^<span class="number">65</span> + x^<span class="number">63</span> - x^<span class="number">61</span> + x^<span class="number">59</span> - <span class="number">2</span>*x^<span class="number">58</span> + <span class="number">6</span>*x^<span class="number">56</span> + x^<span class="number">55</span> + <span class="number">3</span>*x^<span class="number">54</span> - x^<span class="number">53</span> + <span class="number">2</span>*x^<span class="number">52</span> + <span class="number">3</span>*x^<span class="number">51</span> + x^<span class="number">50</span> + <span class="number">2</span>*x^<span class="number">49</span> + <span class="number">3</span>*x^<span class="number">47</span> + <span class="number">2</span>*x^<span class="number">46</span> - <span class="number">4</span>*x^<span class="number">45</span> + <span class="number">3</span>*x^<span class="number">44</span> + <span class="number">3</span>*x^<span class="number">43</span> - x^<span class="number">42</span> - <span class="number">2</span>*x^<span class="number">40</span> - <span class="number">5</span>*x^<span class="number">39</span> + x^<span class="number">38</span> + x^<span class="number">37</span> + <span class="number">2</span>*x^<span class="number">36</span> + <span class="number">2</span>*x^<span class="number">35</span> + x^<span class="number">34</span> - x^<span class="number">33</span> + x^<span class="number">32</span> - <span class="number">5</span>*x^<span class="number">31</span> + x^<span class="number">30</span> + x^<span class="number">29</span> + <span class="number">2</span>*x^<span class="number">28</span> - <span class="number">2</span>*x^<span class="number">27</span> + <span class="number">3</span>*x^<span class="number">26</span> - x^<span class="number">25</span> - x^<span class="number">23</span> - x^<span class="number">22</span> - <span class="number">3</span>*x^<span class="number">21</span> + <span class="number">2</span>*x^<span class="number">20</span> - x^<span class="number">19</span> - x^<span class="number">17</span> + <span class="number">2</span>*x^<span class="number">16</span> - <span class="number">2</span>*x^<span class="number">15</span> - <span class="number">2</span>*x^<span class="number">14</span> - <span class="number">2</span>*x^<span class="number">13</span> - <span class="number">2</span>*x^<span class="number">12</span> + <span class="number">2</span>*x^<span class="number">11</span> - <span class="number">2</span>*x^<span class="number">9</span> + <span class="number">3</span>*x^<span class="number">8</span> - <span class="number">4</span>*x^<span class="number">7</span> + <span class="number">2</span>*x^<span class="number">6</span> - <span class="number">2</span>*x^<span class="number">5</span> - <span class="number">5</span>*x^<span class="number">4</span> - <span class="number">3</span>*x^<span class="number">3</span> + <span class="number">5</span>*x^<span class="number">2</span> - <span class="number">2</span></span><br><span class="line">w = <span class="number">86258923706084556733053644452456806418792871483898871193707132372143291757396867798433017660985422614532352743658877188445517898648519256573663299464811234251773841741466280567326570167017786562044635756348763128567054349991798640926148221279889174229551074668002853442182664523748992260830782387602048836221</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">k = f % (x-<span class="number">1</span>)</span><br><span class="line">k_int=ZZ(k)</span><br><span class="line">q = GCD(w -<span class="number">2</span>^k_int, n)</span><br><span class="line">p = n // q</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(<span class="built_in">pow</span>(c, inverse(e, (p-<span class="number">1</span>)*(q-<span class="number">1</span>)), n))))</span><br></pre></td></tr></table></figure>

<p>代码报错了，检查大概知道了原因在于k的值最后是负数，所以直接2^k不行。</p>
<p>正确部分</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">k = f % (x-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">p = GCD(w * <span class="built_in">pow</span>(<span class="number">2</span>, -k, n) - <span class="number">1</span>, n)</span><br><span class="line">q = n // p</span><br><span class="line"><span class="comment">#b&#x27;ictf&#123;p-1_g0es_aB$olU7eLy_w1lD!!!&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>解释：当k是负数时， $2^{k}\pmod{n}$实际上是$2^{-\lvert k\rvert }\pmod{n}$的模逆元。这是因为指数运算是周期性的，且模逆元可以看作是将指数“翻转”到模数的范围内。pow(2, -k, n) 计算的是 $2^{k}\pmod{n}$ 的模逆元。如果 k是负数，这意味着我们正在寻找一个数 <em>y</em> 使得 $2^{k}*y\equiv 1\pmod{n}$，然后乘上w再减1就是与n有共同因子。勉强理解是这样，但我数学这方面并未深入研究，所以个人感觉纠错推导过程有点牵强，日后有新理解再做修改吧。</p>
]]></content>
      <tags>
        <tag>crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>TGCTF2025</title>
    <url>/2025/04/14/TGCTF2025.html</url>
    <content><![CDATA[<p>部分密码题目复现，后续应该会把没复现的几道题补上吧（或许吧</p>
<h2 id="费克特尔"><a href="#费克特尔" class="headerlink" title="费克特尔"></a><strong>费克特尔</strong></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c=670610235999012099846283721569059674725712804950807955010725968103642359765806</span><br><span class="line">n=810544624661213367964996895060815354972889892659483948276203088055391907479553</span><br><span class="line">e=65537</span><br></pre></td></tr></table></figure>

<p>简单的RSA，借助yafu对n进行质因数分解得到多了质数p1,p2,p3等。那么phi&#x3D;（p1-1)<em>(p2-1)</em>(p3-1)·····</p>
<p>后续就正常RSA那一套解就好了。flag:TGCTF{f4888_6abdc_9c2bd_9036bb}</p>
<h2 id="宝宝RSA"><a href="#宝宝RSA" class="headerlink" title="宝宝RSA"></a>宝宝RSA</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> gcd</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="comment"># PART1</span></span><br><span class="line">p1 = getPrime(<span class="number">512</span>)</span><br><span class="line">q1 = getPrime(<span class="number">512</span>)</span><br><span class="line">n1 = p1 * q1</span><br><span class="line">phi = (p1 - <span class="number">1</span>) * (q1 - <span class="number">1</span>)</span><br><span class="line">m1 = bytes_to_long(flag[:<span class="built_in">len</span>(flag) // <span class="number">2</span>])</span><br><span class="line">e1 = getPrime(<span class="number">18</span>)</span><br><span class="line"><span class="keyword">while</span> gcd(e1, phi) != <span class="number">1</span>:</span><br><span class="line">    e1 = getPrime(<span class="number">17</span>)</span><br><span class="line">c1 = <span class="built_in">pow</span>(m1, e1, n1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;p1 =&quot;</span>, p1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;q1 =&quot;</span>, q1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c1 =&quot;</span>, c1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># PART2</span></span><br><span class="line">n2 = getPrime(<span class="number">512</span>) * getPrime(<span class="number">512</span>)</span><br><span class="line">e2 = <span class="number">3</span></span><br><span class="line">m2 = bytes_to_long(flag[<span class="built_in">len</span>(flag) // <span class="number">2</span>:])</span><br><span class="line">c2 = <span class="built_in">pow</span>(m2, e2, n2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n2 =&quot;</span>, n2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c2 =&quot;</span>, c2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e2 =&quot;</span>, e2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># p1 = 8362851990079664018649774360159786938757293294328116561219351503022492961843907118845919317399785168488103775809531198339213009936918460080250107807031483</span></span><br><span class="line"><span class="comment"># q1 = 8312546034426788223492083178829355192676175323324230533451989649056072814335528263136523605276378801682321623998646291206494179416941978672637426346496531</span></span><br><span class="line"><span class="comment"># c1 = 39711973075443303473292859404026809299317446021917391206568511014894789946819103680496756934914058521250438186214943037578346772475409633145435232816799913236259074769958139045997486622505579239448395807857034154142067866860431132262060279168752474990452298895511880964765819538256786616223902867436130100322</span></span><br><span class="line"><span class="comment"># n2 = 103873139604388138367962901582343595570773101048733694603978570485894317088745160532049473181477976966240986994452119002966492405873949673076731730953232584747066494028393377311943117296014622567610739232596396108513639030323602579269952539931712136467116373246367352649143304819856986264023237676167338361059</span></span><br><span class="line"><span class="comment"># c2 = 51380982170049779703682835988073709896409264083198805522051459033730166821511419536113492522308604225188048202917930917221</span></span><br><span class="line"><span class="comment"># e2 = 3</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>思路：flag拆成两部分，分别求出前后两部分然后合并即可。</p>
<p>前半部分知道p和q也知道e的大致范围（相对来说比较小）直接爆破即可，后半部分e很小可以进行爆破。</p>
<p>代码：</p>
<p>前半部分</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> primerange</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> gcd</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 17位素数范围：2^16到2^17-1</span></span><br><span class="line">primes_17 = <span class="built_in">list</span>(primerange(<span class="number">2</span>**<span class="number">16</span>, <span class="number">2</span>**<span class="number">17</span>))</span><br><span class="line"><span class="comment"># 18位素数范围：2^17到2^18-1</span></span><br><span class="line">primes_18 = <span class="built_in">list</span>(primerange(<span class="number">2</span>**<span class="number">17</span>, <span class="number">2</span>**<span class="number">18</span>))</span><br><span class="line">candidates = primes_17 + primes_18</span><br><span class="line">p1 = <span class="number">8362851990079664018649774360159786938757293294328116561219351503022492961843907118845919317399785168488103775809531198339213009936918460080250107807031483</span></span><br><span class="line">q1 = <span class="number">8312546034426788223492083178829355192676175323324230533451989649056072814335528263136523605276378801682321623998646291206494179416941978672637426346496531</span></span><br><span class="line">phi = (p1 - <span class="number">1</span>) * (q1 - <span class="number">1</span>)</span><br><span class="line">valid_e = [e <span class="keyword">for</span> e <span class="keyword">in</span> candidates <span class="keyword">if</span> gcd(e, phi) == <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">c1 = <span class="number">39711973075443303473292859404026809299317446021917391206568511014894789946819103680496756934914058521250438186214943037578346772475409633145435232816799913236259074769958139045997486622505579239448395807857034154142067866860431132262060279168752474990452298895511880964765819538256786616223902867436130100322</span></span><br><span class="line">n1 = p1 * q1</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> e <span class="keyword">in</span> valid_e:</span><br><span class="line">    d = <span class="built_in">pow</span>(e, -<span class="number">1</span>, phi)</span><br><span class="line">    m1 = <span class="built_in">pow</span>(c1, d, n1)</span><br><span class="line">    flag_part = long_to_bytes(m1)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;TGCTF&#x27;</span> <span class="keyword">in</span> flag_part:  <span class="comment"># 根据预期flag格式调整</span></span><br><span class="line">        <span class="built_in">print</span>(flag_part.decode())</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="comment">#TGCTF&#123;!!3xP_Is_S</span></span><br></pre></td></tr></table></figure>

<p>后半部分：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> primerange</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> gcd</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n2 = <span class="number">103873139604388138367962901582343595570773101048733694603978570485894317088745160532049473181477976966240986994452119002966492405873949673076731730953232584747066494028393377311943117296014622567610739232596396108513639030323602579269952539931712136467116373246367352649143304819856986264023237676167338361059</span></span><br><span class="line">c2 = <span class="number">51380982170049779703682835988073709896409264083198805522051459033730166821511419536113492522308604225188048202917930917221</span></span><br><span class="line">e2 = <span class="number">3</span></span><br><span class="line">k = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    res = gmpy2.iroot(k*n2+c2,e2)</span><br><span class="line">    <span class="keyword">if</span>(res[<span class="number">1</span>] == <span class="literal">True</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(res[<span class="number">0</span>])[<span class="number">2</span>:]))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    k += <span class="number">1</span></span><br><span class="line"><span class="comment">#m@ll_But_D@ng3r0&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="tRwSiAns"><a href="#tRwSiAns" class="headerlink" title="tRwSiAns"></a><strong>tRwSiAns</strong></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> FLAG</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, bytes_to_long</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_key</span>(<span class="params">bits=<span class="number">512</span></span>):</span><br><span class="line">    p = getPrime(bits)</span><br><span class="line">    q = getPrime(bits)</span><br><span class="line">    <span class="keyword">return</span> p * q, <span class="number">3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hash</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(hashlib.md5(<span class="built_in">str</span>(x).encode()).hexdigest(), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">m, n, e</span>):</span><br><span class="line">    x1, x2 = <span class="number">307</span>, <span class="number">7</span></span><br><span class="line">    c1 = <span class="built_in">pow</span>(m + <span class="built_in">hash</span>(x1), e, n)</span><br><span class="line">    c2 = <span class="built_in">pow</span>(m + <span class="built_in">hash</span>(x2), e, n)</span><br><span class="line">    <span class="keyword">return</span> c1, c2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">m = bytes_to_long(FLAG)</span><br><span class="line">n, e = generate_key()</span><br><span class="line">c1, c2 = encrypt(m, n, e)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n = <span class="subst">&#123;n&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;e = <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;c1 = <span class="subst">&#123;c1&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;c2 = <span class="subst">&#123;c2&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">n = <span class="number">100885785256342169056765112203447042910886647238787490462506364977429519290706204521984596783537199842140535823208433284571495132415960381175163434675775328905396713032321690195499705998621049971024487732085874710868565606249892231863632731481840542506411757024315315311788336796336407286355303887021285839839</span></span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">c1 = <span class="number">41973910895747673899187679417443865074160589754180118442365040608786257167532976519645413349472355652086604920132172274308809002827286937134629295632868623764934042989648498006706284984313078230848738989331579140105876643369041029438708179499450424414752031366276378743595588425043730563346092854896545408366</span></span><br><span class="line">c2 = <span class="number">41973912583926901518444642835111314526720967879172223986535984124576403651553273447618087600591347032422378272332279802860926604693828116337548053006928860031338938935746179912330961194768693506712533420818446672613053888256943921222915644107389736912059397747390472331492265060448066180414639931364582445814</span></span><br></pre></td></tr></table></figure>

<p> <strong>Franklin-Reiter 相关消息攻击</strong> 两个密文对应的消息存在线性关系.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from Crypto.Util.number import long_to_bytes</span><br><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line">def hash(x):</span><br><span class="line">    return int(hashlib.md5(str(x).encode()).hexdigest(), 16)</span><br><span class="line">    </span><br><span class="line">h1 = hash(307)</span><br><span class="line">h2 = hash(7)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = 100885785256342169056765112203447042910886647238787490462506364977429519290706204521984596783537199842140535823208433284571495132415960381175163434675775328905396713032321690195499705998621049971024487732085874710868565606249892231863632731481840542506411757024315315311788336796336407286355303887021285839839</span><br><span class="line">e=3</span><br><span class="line">delta = h1 - h2</span><br><span class="line">c1 = 41973910895747673899187679417443865074160589754180118442365040608786257167532976519645413349472355652086604920132172274308809002827286937134629295632868623764934042989648498006706284984313078230848738989331579140105876643369041029438708179499450424414752031366276378743595588425043730563346092854896545408366</span><br><span class="line">c2 = 41973912583926901518444642835111314526720967879172223986535984124576403651553273447618087600591347032422378272332279802860926604693828116337548053006928860031338938935746179912330961194768693506712533420818446672613053888256943921222915644107389736912059397747390472331492265060448066180414639931364582445814</span><br><span class="line"></span><br><span class="line">R.&lt;s&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = (s+h1)^3 - c1</span><br><span class="line">g = (s +h2)^3 - c2</span><br><span class="line">flag = -gcd(f, g)[0]</span><br><span class="line"></span><br><span class="line">print(long_to_bytes(int(flag)))</span><br><span class="line">#TGCTF&#123;RS4_Tw1nZ_d0You_th1nk_ItS_fun_2win?!!!1111111111&#125;</span><br></pre></td></tr></table></figure>

<h2 id="LLLCG"><a href="#LLLCG" class="headerlink" title="LLLCG"></a>LLLCG</h2><p>咕咕咕，后续这题应该不搞了，大概去看LCG相关的题学习一下就好了</p>
<h2 id="EZRSA"><a href="#EZRSA" class="headerlink" title="EZRSA"></a>EZRSA</h2><p>咕咕咕，这题emmmm也不搞了吧，学习一下p的低位泄露然后就过。</p>
]]></content>
      <tags>
        <tag>crypto</tag>
      </tags>
  </entry>
</search>
